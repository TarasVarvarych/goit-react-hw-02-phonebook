{"version":3,"file":"static/js/915.2529b28e.chunk.js","mappings":"iPACaA,EAAgBC,EAAAA,GAAAA,KAAH,6FAMbC,EAAYD,EAAAA,GAAAA,MAAH,mIAQTE,EAAYF,EAAAA,GAAAA,MAAH,gPAaTG,EAAgBH,EAAAA,GAAAA,OAAH,sR,uCCjBnB,SAASI,IACd,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAoBMC,EAAoB,SAAAC,GAExB,OADiBA,EAAEC,OAAXC,MAEN,IAAK,OACHN,EAAeI,EAAEC,OAAOE,OACxB,MACF,IAAK,SACHL,EAAUE,EAAEC,OAAOE,OACnB,MACF,QACE,OAEL,EAED,OACE,UAACpB,EAAD,CAAeqB,SAjCI,SAAAJ,GACnBA,EAAEK,iBACEhB,EAASiB,MAAK,qBAAGJ,OAAoBP,CAAvB,IAChBY,OAAOC,MAAP,UAAgBb,EAAhB,kCAGFH,GACEiB,EAAAA,EAAAA,IAAW,CACTP,KAAMP,EACNE,OAAAA,KAIJD,EAAe,IACfE,EAAU,IACVE,EAAEC,OAAOS,QACV,EAiBC,WACE,UAACzB,EAAD,CAAW0B,QAAQ,GAAnB,kBAEE,SAACzB,EAAD,CACE0B,SAAUb,EACVc,KAAK,OACLX,KAAK,OACLC,MAAOR,EACPmB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC/B,EAAD,WACG,IADH,SAGE,SAACC,EAAD,CACE0B,SAAUb,EACVc,KAAK,MACLX,KAAK,SACLC,MAAON,EACPiB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAAC7B,EAAD,CAAe0B,KAAK,SAApB,2BAGL,CC/EM,I,IAAMI,EAAcjC,EAAAA,GAAAA,GAAH,wGAOXkC,EAAelC,EAAAA,GAAAA,OAAH,kQAeZmC,EAAcnC,EAAAA,GAAAA,GAAH,8FAMXoC,EAAcpC,EAAAA,GAAAA,KAAH,iEAKXqC,EAAerC,EAAAA,GAAAA,OAAH,0RCxBlB,SAASsC,EAAT,GAAwC,IAArBpB,EAAoB,EAApBA,KAAML,EAAc,EAAdA,OAAQ0B,EAAM,EAANA,GACtC,GAA4B7B,EAAAA,EAAAA,WAAS,GAArC,eAAO8B,EAAP,KAAeC,EAAf,KACA,GAAsC/B,EAAAA,EAAAA,UAASQ,GAA/C,eAAOP,EAAP,KAAoBC,EAApB,KACA,GAAsCF,EAAAA,EAAAA,UAASG,GAA/C,eAAO6B,EAAP,KAAoBC,EAApB,KACA,GAAgCjC,EAAAA,EAAAA,UAAS,MAAzC,eAAOkC,EAAP,KAAiBC,EAAjB,KACMrC,GAAWC,EAAAA,EAAAA,MASXqC,EAAsB,SAAA9B,GAE1B,OADiBA,EAAEC,OAAXC,MAEN,IAAK,OACHN,EAAeI,EAAEC,OAAOE,OACxB,MACF,IAAK,SACHwB,EAAe3B,EAAEC,OAAOE,OACxB,MACF,QACE,OAEL,EACD,OACE,UAACgB,EAAD,WACGK,GAAUD,IAAOK,GAChB,iCACE,kBACEf,KAAK,OACLX,KAAK,OACLU,SAAUkB,EACV3B,MAAOR,KAET,kBACEkB,KAAK,SACLX,KAAK,SACLU,SAAUkB,EACV3B,MAAOuB,QAIX,iCACE,SAACN,EAAD,UAAclB,IADhB,MACuCL,MAIzC,UAACwB,EAAD,CAAcR,KAAK,SAASkB,QAAS,kBA3Cf,SAAAR,GACxBE,GAAU,SAAAO,GAAS,OAAKA,CAAL,IACnBH,EAAYN,GACRC,GACFhC,GAASyC,EAAAA,EAAAA,IAAc,CAAE/B,KAAMP,EAAaE,OAAQ6B,EAAaH,GAAAA,IAEpE,CAqC8CW,CAAkBX,EAAxB,EAArC,UACGC,EAAS,OAAS,OAAQ,QAE7B,SAACN,EAAD,CACEL,KAAK,SACLkB,QAAS,WACPvC,GAAS2C,EAAAA,EAAAA,IAAcZ,GACxB,EAJH,sBAUL,CCnEM,SAASa,IACd,IAAMC,GAAS/C,EAAAA,EAAAA,IAAYgD,EAAAA,IACrBjD,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBgD,EAAmBF,EAAOG,cAC1BC,EAAmBpD,EAASgD,QAAO,qBAAGnC,KACrCsC,cAAcE,SAASH,EADW,IAGnC/C,GAAWC,EAAAA,EAAAA,MAKjB,OAJAkD,EAAAA,EAAAA,YAAU,WACRnD,GAASoD,EAAAA,EAAAA,MACV,GAAE,CAACpD,KAGF,SAACyB,EAAD,UACGwB,EAAiBI,KAAI,gBAAG3C,EAAH,EAAGA,KAAML,EAAT,EAASA,OAAQ0B,EAAjB,EAAiBA,GAAjB,OACpB,SAACD,EAAD,CAASpB,KAAMA,EAAML,OAAQA,EAAQ0B,GAAIA,GAASA,EAD9B,KAK3B,CCzBM,I,EAAMuB,EAAc9D,EAAAA,GAAAA,MAAH,gPAaX+D,EAAc/D,EAAAA,GAAAA,MAAH,mI,UCVjB,SAASgE,IACd,IAAMX,GAAS/C,EAAAA,EAAAA,IAAYgD,EAAAA,IACrB9C,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAACsD,EAAD,2BAEE,SAACD,EAAD,CACEjC,KAAK,OACLX,KAAK,SACLU,SATiB,SAAAZ,GACrBR,GAASyD,EAAAA,EAAAA,GAAUjD,EAAEkD,cAAc/C,OACpC,EAQKA,MAAOkC,MAId,CCND,IAAMc,EAAgBnE,EAAAA,GAAAA,GAAH,0EAKnB,EAhBA,WACE,OACE,iCACE,SAACI,EAAD,KACA,SAAC4D,EAAD,KACA,SAACG,EAAD,wBACA,SAACf,EAAD,MAGL,C","sources":["components/PhoneBook/ContactForm/ContactForm.styled.js","components/PhoneBook/ContactForm/ContactForm.jsx","components/PhoneBook/Contacts/Contacts.styled.js","components/PhoneBook/Contacts/Contact.jsx","components/PhoneBook/Contacts/Contacts.jsx","components/PhoneBook/Filter/Filter.styled.js","components/PhoneBook/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ContactFormEl = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const FormInput = styled.input`\n  width: 400px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  background-color: #7da2a9;\n  border-radius: 5px;\n  border: transparent;\n  outline: none;\n  padding: 10px;\n  font-size: 20px;\n`;\n\nexport const AddContactBtn = styled.button`\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  background-color: black;\n  color: white;\n  font-weight: 700;\n  margin-top: 15px;\n  &:hover {\n    background-color: white;\n    color: black;\n    scale: 1.05;\n  }\n`;\n","import { useState } from 'react';\nimport {\n  ContactFormEl,\n  FormLabel,\n  FormInput,\n  AddContactBtn,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsAPI';\n\nexport function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const [contactName, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.some(({ name }) => name === contactName)) {\n      window.alert(`${contactName} is already in your contacts`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: contactName,\n        number,\n      })\n    );\n\n    setContactName('');\n    setNumber('');\n    e.target.reset();\n  };\n\n  const handleInputChange = e => {\n    const { name } = e.target;\n    switch (name) {\n      case 'name':\n        setContactName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <ContactFormEl onSubmit={handleSubmit}>\n      <FormLabel htmlFor=\"\">\n        Name\n        <FormInput\n          onChange={handleInputChange}\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        {' '}\n        Phone\n        <FormInput\n          onChange={handleInputChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </FormLabel>\n      <AddContactBtn type=\"submit\">Add contact</AddContactBtn>\n    </ContactFormEl>\n  );\n}\n","import styled from 'styled-components';\nexport const ContactList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const DeleteButton = styled.button`\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  background-color: black;\n  color: white;\n  font-weight: 700;\n  margin-left: 15px;\n  &:hover {\n    background-color: red;\n    scale: 1.05;\n  }\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ContactName = styled.span`\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const ChangeButton = styled.button`\n  cursor: pointer;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  margin-left: 15px;\n\n  background-color: #7da2a9;\n  color: white;\n  font-weight: 700;\n  &:hover {\n    background-color: black;\n    color: #fff;\n    scale: 1.05;\n  }\n`;\n","import { useState } from 'react';\nimport {\n  ChangeButton,\n  ContactItem,\n  ContactName,\n  DeleteButton,\n} from './Contacts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contactsAPI';\n\nexport function Contact({ name, number, id }) {\n  const [isEdit, setIsEdit] = useState(false);\n  const [contactName, setContactName] = useState(name);\n  const [phoneNumber, setPhoneNumber] = useState(number);\n  const [targetId, setTargetId] = useState(null);\n  const dispatch = useDispatch();\n\n  const handleEditContact = id => {\n    setIsEdit(prevState => !prevState);\n    setTargetId(id);\n    if (isEdit) {\n      dispatch(updateContact({ name: contactName, number: phoneNumber, id }));\n    }\n  };\n  const handleChangeContact = e => {\n    const { name } = e.target;\n    switch (name) {\n      case 'name':\n        setContactName(e.target.value);\n        break;\n      case 'number':\n        setPhoneNumber(e.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n  return (\n    <ContactItem>\n      {isEdit && id === targetId ? (\n        <>\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChangeContact}\n            value={contactName}\n          />\n          <input\n            type=\"number\"\n            name=\"number\"\n            onChange={handleChangeContact}\n            value={phoneNumber}\n          />\n        </>\n      ) : (\n        <>\n          <ContactName>{name}</ContactName> : {number}\n        </>\n      )}\n\n      <ChangeButton type=\"button\" onClick={() => handleEditContact(id)}>\n        {isEdit ? 'Save' : 'Edit'}{' '}\n      </ChangeButton>\n      <DeleteButton\n        type=\"button\"\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </DeleteButton>\n    </ContactItem>\n  );\n}\n","import { useEffect } from 'react';\nimport { ContactList } from './Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contactsAPI';\nimport { Contact } from './Contact';\nexport function Contacts() {\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactList>\n      {filteredContacts.map(({ name, number, id }) => (\n        <Contact name={name} number={number} id={id} key={id} />\n      ))}\n    </ContactList>\n  );\n}\n","import styled from 'styled-components';\nexport const FilterInput = styled.input`\n  width: 400px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  background-color: #7da2a9;\n  border-radius: 5px;\n  border: transparent;\n  outline: none;\n  padding: 10px;\n  font-size: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  font-size: 24px;\n  font-weight: 500;\n`;\n","import { FilterInput, FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice/filterSlice';\nexport function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <FilterLabel>\n      Find by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        onChange={onFilterChange}\n        value={filter}\n      />\n    </FilterLabel>\n  );\n}\n","import { ContactForm } from 'components/PhoneBook/ContactForm/ContactForm';\nimport { Contacts } from 'components/PhoneBook/Contacts/Contacts';\nimport { Filter } from 'components/PhoneBook/Filter/Filter';\nimport styled from 'styled-components';\n\nfunction ContactsPage() {\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Contacts />\n    </>\n  );\n}\n\nconst ContactsTitle = styled.h2`\n  letter-spacing: 0.4rem;\n  font-family: serif;\n`;\n\nexport default ContactsPage;\n"],"names":["ContactFormEl","styled","FormLabel","FormInput","AddContactBtn","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","useState","contactName","setContactName","number","setNumber","handleInputChange","e","target","name","value","onSubmit","preventDefault","some","window","alert","addContact","reset","htmlFor","onChange","type","pattern","title","required","ContactList","DeleteButton","ContactItem","ContactName","ChangeButton","Contact","id","isEdit","setIsEdit","phoneNumber","setPhoneNumber","targetId","setTargetId","handleChangeContact","onClick","prevState","updateContact","handleEditContact","deleteContact","Contacts","filter","getFilter","normalizedFilter","toLowerCase","filteredContacts","includes","useEffect","fetchContacts","map","FilterInput","FilterLabel","Filter","setFilter","currentTarget","ContactsTitle"],"sourceRoot":""}